import numpy as np
import math as m
import os
import time

arterytree = [[4.0, 1.45, 0.163, 4.0], [2.0, 1.12, 0.132, 4.0], [3.4, 0.42, 0.067, 4.0], [8.9, 0.37, 0.063, 4.0],
              [3.9, 1.07, 0.127, 4.0], [3.4, 0.62, 0.086, 4.0], [15.0, 0.1, 0.03, 8.0],  [6.8, 0.4, 0.066, 4.0],
              [14.8, 0.19, 0.045, 8.0], [8.9, 0.37, 0.063, 4.0], [5.2, 1.0, 0.12, 4.0],  [8.9, 0.37, 0.063, 4.0],
              [14.8, 0.19, 0.045, 8.0], [6.8, 0.4, 0.066, 4.0],   [15.0, 0.1, 0.03, 8.0],  [5.0, 0.1, 0.03, 8.0],
              [6.1, 0.36, 0.062, 4.0], [10.0, 0.2, 0.052, 8.0], [5.0, 0.1, 0.03, 8.0],   [3.1, 0.37, 0.063, 4.0],
              [5.2, 0.95, 0.116, 4.0], [8.9, 0.37, 0.063, 4.0], [5.0, 0.1, 0.03, 8.0],   [10.0, 0.2, 0.052, 8.0],
              [6.1, 0.36, 0.062, 4.0], [5.0, 0.1, 0.03, 8.0],   [3.0, 0.15, 0.035, 16.0],  [5.6, 0.31, 0.057, 4.0],
              [5.0, 0.1, 0.03, 16.0], [8.0, 0.15, 0.035, 16.0], [5.9, 0.18, 0.045, 8.0], [11.8, 0.15, 0.042, 8.0],
              [4.0, 0.07, 0.02, 8.0], [5.2, 0.95, 0.116, 4.0],   [4.0, 0.07, 0.02, 8.0],   [11.8, 0.15, 0.042, 8.0],
              [5.9, 0.18, 0.045, 8.0], [8.0, 0.15, 0.035, 16.0], [5.0, 0.1, 0.03, 16.0], [5.6, 0.31, 0.057, 4.0],
              [3.0, 0.15, 0.035, 16.0], [6.3, 0.28, 0.055, 4.0], [3.0, 0.1, 0.03, 8.0],  [5.9, 0.13, 0.039, 8.0],
              [4.0, 0.1, 0.03, 16.0], [3.0, 0.06, 0.02, 16.0],   [5.9, 0.08, 0.026, 16.0], [3.0, 0.07, 0.02, 16.0],
              [1.0, 0.39, 0.064, 4.0], [5.3, 0.87, 0.108, 4.0],  [3.0, 0.07, 0.02, 16.0], [5.9, 0.08, 0.026, 16.0],
              [3.0, 0.06, 0.02, 16.0], [4.0, 0.1, 0.03, 16.0],   [5.9, 0.13, 0.039, 8.0],  [3.0, 0.1, 0.03, 8.0],
              [6.3, 0.28, 0.055, 8.0], [15.0, 0.15, 0.035, 8.0], [6.3, 0.26, 0.053, 4.0], [5.9, 0.08, 0.026, 16.0],
              [7.1, 0.18, 0.045, 4.0], [6.3, 0.28, 0.054, 4.0], [6.6, 0.22, 0.049, 4.0], [3.2, 0.26, 0.053, 4.0],
              [5.3, 0.57, 0.08, 4.0], [5.9, 0.43, 0.069, 4.0], [3.2, 0.26, 0.053, 4.0], [5.9, 0.08, 0.026, 16.0],
              [6.3, 0.26, 0.053, 4.0], [15.0, 0.15, 0.035, 8.0], [6.3, 0.25, 0.052, 4.0], [5.0, 0.07, 0.02, 16.0],
              [4.0, 0.06, 0.02, 16.0], [5.0, 0.07, 0.02, 16.0], [5.3, 0.57, 0.08, 4.0], [5.0, 0.07, 0.02, 16.0],
              [4.0, 0.06, 0.02, 16.0], [5.0, 0.07, 0.02, 16.0], [6.3, 0.25, 0.052, 4.0], [5.0, 0.06, 0.02, 16.0],
              [4.6, 0.24, 0.05, 4.0], [5.8, 0.52, 0.076, 4.0], [5.0, 0.16, 0.043, 4.0], [5.8, 0.52, 0.076, 4.0],
              [4.6, 0.24, 0.05, 4.0], [5.0, 0.06, 0.02, 16.0], [6.7, 0.21, 0.049, 8.0], [11.7, 0.16, 0.043, 8.0],
              [8.3, 0.29, 0.055, 4.0], [5.0, 0.2, 0.04, 16.0], [5.0, 0.2, 0.04, 16.0], [8.3, 0.29, 0.055, 4.0],
              [11.7, 0.16, 0.043, 8.0], [6.7, 0.21, 0.049, 8.0], [8.5, 0.19, 0.0462, 8.0], [7.9, 0.09, 0.028, 16.0],
              [11.7, 0.16, 0.043, 8.0], [6.1, 0.27, 0.053, 4.0], [6.1, 0.27, 0.053, 4.0], [11.7, 0.16, 0.043, 8.0],
              [7.9, 0.09, 0.028, 16.0], [8.5, 0.19, 0.0462, 8.0], [8.5, 0.19, 0.046, 8.0], [12.7, 0.24, 0.05, 8.0],
              [12.6, 0.23, 0.049, 16.0], [12.6, 0.23, 0.049, 16.0], [12.7, 0.24, 0.05, 8.0], [8.5, 0.19, 0.046, 8.0],
              [12.7, 0.24, 0.05, 8.0], [12.7, 0.24, 0.05, 8.0], [9.4, 0.2, 0.047, 8.0], [9.4, 0.2, 0.047, 8.0],
              [9.4, 0.2, 0.05, 4.0], [9.4, 0.2, 0.05, 4.0], [2.5, 0.13, 0.039, 16.0], [16.1, 0.18, 0.045, 16.0],
              [16.1, 0.18, 0.045, 16.0], [2.5, 0.13, 0.039, 16.0], [15.0, 0.1, 0.02, 16.0], [15.9, 0.13, 0.039, 16.0],
              [16.1, 0.18, 0.045, 16.0], [16.1, 0.18, 0.045, 16.0], [15.9, 0.13, 0.039, 16.0], [15.0, 0.1, 0.02, 16.0],
              [15.0, 0.1, 0.02, 16.0], [15.9, 0.13, 0.019, 16.0], [15.9, 0.13, 0.019, 16.0], [15.0, 0.1, 0.02, 16.0]]

def stenosis(M, R, G, **data):
    s = time.time()
    RLC = np.zeros(shape=(128,4))
    D = np.zeros(shape=(128))                            # creating empty arrays of size 128,0
    mu = M                                               #0.04  #blood viscosity
    rho = R                                              #1.05       #blood density
    G0 = G                                               #0.6   #Reflection coefficient
    pi = m.pi                                            #value of pi
    pos = []
    values = []

    for keys, value in data.items():
        pos.append(int(keys))
        if value is None:
            values.append(0)
        else: values.append(value)
    j = 0
    
    for i in pos:
        D[i] = values[j]
        j = j +1

    at = np.asarray(arterytree)
    l = at[:, 0]                                          #assigning l with dataframe of 0th col of a variable
    r = at[:, 1]                                          #assigning r with dataframe of 1st col of a variable
    h = at[:, 2]                                          #assigning h with dataframe of 2nd col of a variable
    E = np.multiply(at[:, 3], 10e+5)                      #assigning E with dataframe of 3rd col of a variable

    RLC[:, 0] = np.true_divide(8*mu*l, np.power(pi*np.multiply(np.subtract(r, D), r), 4))   #8*mu*l ./ (pi*(r-D.*r).^4);
    RLC[:, 1] = np.true_divide(np.multiply(l, rho), (pi*np.power(np.multiply(np.subtract(r, D), r), 2)))   # l.*rho ./ ((pi*(r-D.*r).^2))
    RLC[:, 2] = np.multiply(np.multiply(3*pi, l), np.true_divide(np.power(np.multiply(np.subtract(r, D), r), 3), np.multiply(2*E, h)))  #3*pi.*l .* (r-D.*r).^3./(2*E.*h)
    c0 = np.true_divide(np.multiply(E, h), rho*(np.multiply(np.subtract(r, D), r)))    #(E.*h./(rho*(r-D.*r))).^0.5
    c0 = np.sign(c0) * (np.abs(c0)) ** (1 / 2)
    R0 =  np.true_divide(rho*c0, np.power(pi*np.multiply(np.subtract(r, D), r), 2 ))     #rho*c0./(pi*(r-D.*r).^2)
    RLC[:, 3] = R0 *(1+G0)/(1-G0)
    path = os.path.join('Artery_Model/Data', 'STENOSIS_RLC.txt')
    np.savetxt(path, RLC, delimiter=',')
    e = time.time()
    print("time: ",e-s)

if __name__ == "__main__":

    #artery_index = [1, 2, 8, 20, 34, 47, 75, 42, 95, 104, 88]
    stn_dat = {'1': 30, '2': 0, '8': 0, '20':0, '34': 0, '47': 0, '75': 0, '42': 0, '95': 0, '104': 0, '88': 0 }
    stenosis(0.04, 1.05, 0.6, **stn_dat)
    

